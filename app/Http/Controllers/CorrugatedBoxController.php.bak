<?php

namespace App\Http\Controllers;

use App\Models\CorrugatedBox;
use App\Models\Product;
use App\Models\File;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Storage;


class CorrugatedBoxController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $validation = Validator::make($request->all(),[
        // $this->validate($request,[
            // product section
            'product_department'=>'required',
            // 'product_reference'=>'required|unique',
            'product_class'=>'required',
            'product_name'=>'required',
            'model='=>'required',
            'additional_text'=>'required',
            'product_type'=>'required',
            'branding'=>'required',
            // cat section
            'material_type'=>'required',
            'material_color'=>'required',
            'box_width'=>'required',
            'box_height'=>'required',
            'box_length'=>'required',
            'quantity_per_item'=>'required',
            'flat_box_width'=>'required',
            'flat_box_height'=>'required',
            'solovan_layer'=>'required',
            'uv_layer'=>'required',
            'coverage'=>'required',
            'glue_points_number'=>'required',
            'merged_normal_layer'=>'required',
            'finger_print_color'=>'required',
        ]);
        if($validation->fails()){
            
        }
        // dd($request);
        $file=new File;
        $product=new Product;
        $corrugatedBox=new CorrugatedBox;
        
        // phase 1 Product Saving
        $product->product_department=$request->product_department;
        $product->product_class=$request->product_class;
        $product->model=$request->model;
        $product->product_name=$request->product_name;
        $product->additional_text=$request->additional_text;
        $product->product_type=$request->product_type;
        $product->branding=$request->branding;
        $product->save();
        // $pid=$product->id;
        // phase 1 Completed
        

        // phase 2 File saveing
        if($request->has('files')){
            foreach($request->file('files') as $file){
                // dd('here');
                $fileName = 'file-'.time().rand(1,1000).'.'.$file->getClientOriginalExtension();
                $file->move('product_files',$fileName);
                File::create([
                    'product_id'=>$product->id,
                    'file'=>$fileName,
                    'extenstion'=>$file->getClientOriginalExtension()
                ]);
                Storage::put('public/pdf/invoice.pdf', $file->output());
            }
        }

        // $pdf = PDF::loadView('pdf.invoice', $data);

        // Storage::put('public/pdf/invoice.pdf', $file->output());

        // return $pdf->download('invoice.pdf');
        // dd($request);
        // $url = "http://www.google.co.in/intl/en_com/images/srpr/logo1w.png";
        // $contents = file_get_contents($url);
        // $name = substr($url, strrpos($url, '/') + 1);
        // Storage::put($name, $contents);

        // phase 2 Completed

        // phase 3 corrugatedBox Saving
        $corrugatedBox->product_id=$product->id;
        $corrugatedBox->material_type=$request->material_type ;
        $corrugatedBox->material_color=$request->material_color;
        $corrugatedBox->box_width=$request->box_width;
        $corrugatedBox->box_height=$request->box_height;
        $corrugatedBox->box_length=$request->box_length;
        $corrugatedBox->quantity_per_item=$request->quantity_per_item;
        $corrugatedBox->flat_box_width=$request->flat_box_width;
        $corrugatedBox->flat_box_height=$request->flat_box_height;
        $corrugatedBox->solovan_layer=$request->solovan_layer;
        $corrugatedBox->uv_layer=$request->uv_layer;
        $corrugatedBox->coverage=$request->coverage;
        $corrugatedBox->glue_points_number=$request->glue_points_number;
        $corrugatedBox->merged_normal_layer=$request->merged_normal_layer;
        $corrugatedBox->finger_print_color=$request->finger_print_color;
        $corrugatedBox->save();
        // dd($corrugatedBox);
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\CorrugatedBox  $corrugatedBox
     * @return \Illuminate\Http\Response
     */
    public function show(CorrugatedBox $corrugatedBox)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\CorrugatedBox  $corrugatedBox
     * @return \Illuminate\Http\Response
     */
    public function edit(CorrugatedBox $corrugatedBox)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\CorrugatedBox  $corrugatedBox
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, CorrugatedBox $corrugatedBox)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\CorrugatedBox  $corrugatedBox
     * @return \Illuminate\Http\Response
     */
    public function destroy(CorrugatedBox $corrugatedBox)
    {
        //
    }
}
